{"version":3,"sources":["firebase.js","actions.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getCollection","collection","a","result","statusResponse","data","error","get","arrayData","docs","map","doc","id","addDocument","add","responde","updateDocument","update","deleteDocument","delete","App","useState","cedula","setCedula","nombre","setNombre","apellido","setApellido","editMode","setEditMode","setId","setError","usuarios","setUsuarios","useEffect","validForm","isValid","isEmpty","addUsuario","e","preventDefault","code","name","last","updateUsuario","updatedUsers","item","deleteUsuario","filterUsers","filter","u","className","class","scope","size","colspan","user","onClick","editUsuario","onSubmit","type","placeholder","onChange","text","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddc1d130.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCvnK7djTqyP-svXsRd8Gy3YJ62c2O5V3Y\",\n    authDomain: \"persona-aa4b3.firebaseapp.com\",\n    projectId: \"persona-aa4b3\",\n    storageBucket: \"persona-aa4b3.appspot.com\",\n    messagingSenderId: \"221655961276\",\n    appId: \"1:221655961276:web:75b523e9d095dfc6620ab9\"\n  };\n\n  export const firebaseApp = firebase.initializeApp(firebaseConfig);","import { firebaseApp} from './firebase'\nimport * as firebase from 'firebase'\nimport 'firebase/firestore'\n\nconst db = firebase.firestore(firebaseApp)\n\n//Metodo generico que permite traer una coleccion de datos//\n//El parametro collection es el nombre de la coleccion en firebase\nexport const getCollection = async (collection) => {\n    //validamos si funciona o no, creamos un objeto con tres paramentos\n    const result = { statusResponse : false, data : null, error : null}\n    try {\n        //Si hay datos en la coleccion se hace lo siguiente\n        //Creamos una constante para almacenar la data\n        const data = await db.collection(collection).get()\n        //Mapeamos el objeto data\n        const arrayData = data.docs.map(doc => ({ id : doc.id, ...doc.data()}))\n        //Si la consulta llena el objeto arrayData retornamos\n        result.statusResponse = true\n        result.data = arrayData\n    } catch (error) {\n        result.error = error \n    }\n    return result\n}\n\n//Metodo para crear un usuario en una coleccion de datos y recibe como parametro el nombre de la collecion y los datos\n//parametros colletion es el nombre de la coleccion en firebase y data son los datos que se quieren guardar\nexport const addDocument = async (collection, data) => {\n    //Validamos si funciona o no con un objeto\n    const result = {statusResponse : false, data : null, error : null}\n    //Creamos una variable para almacenar los datos a enviar.\n    try {\n        const responde = await db.collection(collection).add(data)\n        //Respondemos el id de la nueva tarea ya que no se que ID me dara la base de datos\n        result.data = {id: responde.id}\n        //exito en el result\n        result.statusResponse = true\n    } catch (error) {\n        result.error = error\n    }\n    return result\n}\n\n//Metodo que permite traer un solo usuario de la base de datos, estos metodos son genericos\nexport const getDocument = async (collection, id) => {\n    //validamos si funciona o no la data de la coleccion\n    const result = {statusResponse : false, data : null, error : null}\n    try {\n        //con esta linea de codigo vamos a firebase y consultamos si ese documento existe o no mediate los paramwetros que hay en la funcion\n        const response = await db.collection(collection).doc(id).get()\n        //Mediante este metodo obtenemos la data con el xpress operator\n        result.data = {id : response.id, ...response.data()}\n        result.statusResponse = true\n    } catch (error) {\n        result.error = error\n    }\n    return result\n}\n\nexport const updateDocument = async (collection, id, data) => {\n    const result = {statusResponse : false, data : null, error : null}\n    try {\n        //con esta linea de codigo vamos a firebase y consultamos si ese documento existe \n        //o no mediate los paramwetros que hay en la funcion, lo que se hace es que que\n        const response = await db.collection(collection).doc(id).update(data)\n        result.statusResponse = true\n    } catch (error) {\n        result.error = error\n    }\n    return result\n}\n\n\n//Metodo para eliminar un documento de la coleccion en firebase\nexport const deleteDocument = async (collection, id) => {\n    const result = {statusResponse : false, data : null, error : null}\n    try {\n        //con esta linea de codigo vamos a firebase y consultamos si ese documento existe \n        //o no mediate los paramwetros que hay en la funcion, lo que se hace es que que\n        const response = await db.collection(collection).doc(id).delete()\n        result.statusResponse = true\n    } catch (error) {\n        result.error = error\n    }\n    return result\n}","import React, { useState, useEffect } from 'react'\nimport { isEmpty, size } from \"lodash\";\nimport { getCollection, addDocument, updateDocument, deleteDocument } from './actions'\n\nfunction App() {\n\n  //Se crea un hub de estado para validar si hay datos para ingresar o no\n  const [cedula, setCedula] = useState(\"\")\n  const [nombre, setNombre] = useState(\"\")\n  const [apellido, setApellido] = useState(\"\")\n\n  const [editMode, setEditMode] = useState(false)\n  const [id, setId] = useState(\"\")\n  const [error, setError] = useState(null)\n\n  //Creamos un estado de tipo array para almacenar los usuarios\n  const [usuarios, setUsuarios] = useState([])\n  \n  //Creamos un useEffect para cargar los datos que vienen de la base de datos de firebase\n  useEffect(() => {\n    (async () =>{\n      const result = await getCollection(\"usuario\")\n      if (result.statusResponse) {\n        setUsuarios(result.data)\n      }\n    })()\n  }, [])\n\n  //Metodo para validar el formulrio\n  const validForm = () => {\n    let isValid = true\n    setError(null)\n    //Validamos que el usuario ingrese algo en la data\n    //Para obtener el ID de la coleccion debes instala la coleccion shotID\n    //Para validar campos debemos agrear una libreria que se llama lodash y en la terminal yarn add lodash\n    //Utilizamos una furncion isEmpty\n    if (isEmpty(cedula) || isEmpty(nombre) || isEmpty(apellido)) {\n      setError(\"Debes ingresar datos validos\")\n      isValid = false\n    }\n    return isValid\n  }\n\n  //Creamos el metodo con una funcion tipo flecha\n  const addUsuario = async (e) => {\n    //Validamos que el usuario ingrese algo en la data\n    //Para obtener el ID de la coleccion debes instala la coleccion shotID\n    e.preventDefault()\n    //Se utiliza el validForm para comprobar si hay o no datos en el formulario\n    if (!validForm()) {\n      return\n    }\n\n    //Consultamos la base de datos mediante el addDocument\n    const result = await addDocument(\"usuario\", { code : cedula, name : nombre, last : apellido})\n    //Preguntamos si el query fue exitiso\n    if (!result.statusResponse) {\n      setError(result.error)\n      return\n    }\n\n    //Agregamos esta tarea a la collecion que ya se tiene con el xpress operator\n    setUsuarios([...usuarios, {id: result.data.id, code : cedula, name : nombre, last : apellido}])\n\n    //Limpiamos los campos del formulario\n    setCedula(\"\")\n    setNombre(\"\")\n    setApellido(\"\")\n  }\n\n  //Creamos un metodo el cual permite estar en dos modos el de edicion o de creacion\n  const editUsuario = (user) => {\n    setCedula(user.code)\n    setNombre(user.name)\n    setApellido(user.last)\n    setEditMode(true)\n    setId(user.id)\n  }\n\n  //Metodo para guardar datos actualixados\n  const updateUsuario = async (e) =>{\n    //Validamos que el usuario ingrese algo en la data\n    //Para obtener el ID de la coleccion debes instala la coleccion shotID\n    //Para validar campos debemos agrear una libreria que se llama lodash y en la terminal yarn add lodash\n    //Utilizamos una furncion isEmpty\n    e.preventDefault()\n    if (!validForm()) {\n      return\n    }    \n\n    //Creamos un result y le enviamos los parametros a las acciones\n    const result = await updateDocument(\"usuario\", id, {code : cedula, name : nombre, last : apellido})\n    //Preguntamos si hubo exitio\n    if (!result.statusResponse) {\n      setError(result.error)\n      return\n    }\n\n    //Editamnos la tarea con el map, si el item es igual al parametro reemplace lo que el usuario puso en el input en caso contrqario devuelva el item\n    const updatedUsers = usuarios.map( item => item.id === id ? {id, code : cedula, name : nombre, last : apellido} : item)\n    setUsuarios(updatedUsers)\n    //Limpiamos los campos del formulario\n    setCedula(\"\")\n    setNombre(\"\")\n    setApellido(\"\")\n\n    //El editMode lo ponemos en false\n    setEditMode(false)\n    setId(\"\")\n\n  }\n\n  //Funcion tipo flecha que recibe como parametro el id del registro para poder eliminarlo mediante el concepto de filter\n  const deleteUsuario = async(id) => {\n    //creamios el result para identificar si el proceso su exitioso o no\n    const result = await deleteDocument(\"usuario\", id)\n    //Validamos las respuestas\n    if (!result.statusResponse) {\n      setError(result.error)\n    }\n    //Creamos un filter\n    const filterUsers = usuarios.filter( u => u.id !== id)\n    setUsuarios(filterUsers)\n  }\n\n  return (\n    <div className=\"container\">\n      <hr />\n      <h2>Datos Usuarios Registrados</h2>\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Cedula</th>\n                <th scope=\"col\">Nombre</th>\n                <th scope=\"col\">Apellido</th>\n                <th scope=\"col\">Acciones</th>\n              </tr>\n            </thead>\n            {\n              /*  utilizamos una condicion para saber si hay o no usuarios registradis*/\n              size(usuarios) === 0 ? (\n                <tbody>\n                  <tr>\n                    <td colspan=\"4\" className=\"alert alert-warning text-center bold\">No hay usuarios registrados</td>\n                  </tr>\n                </tbody>\n              ) : (\n                <tbody>                         \n                { \n                    usuarios.map((user) => (\n                      <tr key={user.id}>\n                        <td>{user.code}</td>\n                        <td>{user.name}</td>\n                        <td>{user.last}</td>\n                        <td>\n                          <button \n                            className=\"btn btn-danger btn-sm float-left\"\n                            //Agregamos un onclic al boton para poder ejecutar la accion\n                            onClick={() => deleteUsuario(user.id)}  \n                          >\n                            <i class=\"fa fa-trash-o fa-lg\"></i>                              \n                          </button>\n                          <button \n                            className= {\"btn btn-warning btn-sm float-left mx-2\"}\n                            //Agregamos un onclic al boton para poder ejecutar la accion\n                            onClick={() => editUsuario(user)}\n                          >\n                            <i class=\"fa fa-pencil-square-o fa-lg\"></i>                            \n                          </button>                  \n                        </td>\n                      </tr>\n                    ))                \n                  } \n                </tbody>\n              )\n            }\n          </table>\n        </div>\n        <div className=\"col-4\">\n          <h4 className=\"text-center\">{editMode ? \"Actualizar Usuario\" : \"Registrar Usuario\"}</h4>\n          {/* Agregamos un metodo al formulario*/}\n          <form onSubmit={editMode ? updateUsuario : addUsuario}>\n            {/* preguntamos si hay errores o no */}\n            { error && <span className=\"text-danger\">{error}</span>}\n            <input\n              type=\"text\"\n              className=\"form-control mb-2\"\n              placeholder=\"Ingrese cedula...\"\n              //Cuando el usuario ingrese algo validamos si hay o no datos\n              onChange={(text) => setCedula(text.target.value)}\n              value={cedula}\n            />\n            <input\n              type=\"text\"\n              className=\"form-control mb-2\"\n              placeholder=\"Ingrese nombre...\"\n              onChange={(text) => setNombre(text.target.value)}\n              value={nombre}\n            />\n            <input\n              type=\"text\"\n              className=\"form-control mb-2\"\n              placeholder=\"Ingrese apellido...\"\n              onChange={(text) => setApellido(text.target.value)}\n              value={apellido}\n            />\n            <button \n              className={ editMode ? \"btn btn-warning btn-sm btn-block fa fa-pencil-square-o fa-lg\" : \"btn btn-success btn-sm btn-block fa fa-plus fa-lg\"}\n              type='submit'\n            >\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}